#include <Arduino.h>
#include <NewPing.h>

//       |\      _,,,---,,_
// ZZZzz /,`.-'`'    -.  ;-;;,_
//      |,4-  ) )-,_. ,\ (  `'-'
//     '---''(_/--'  `-'\_)  enjoy my code -Paulo

// Motor A
const int motorPin1 = 8;
const int motorPin2 = 9;
// Motor B
const int motorPin3 = 10;
const int motorPin4 = 11;

// Motor speed
const int MOTOR_STOP = 0;
const int MOTOR_HALF_SPEED = 160;
const int MOTOR_FULL_SPEED = 244;
const int MOTOR_ONE_FOURTH_SPEED = 100;

//attack
void attack() 
{
  analogWrite(motorPin1, MOTOR_STOP);
  analogWrite(motorPin2, MOTOR_FULL_SPEED);
  analogWrite(motorPin3, MOTOR_FULL_SPEED);
  analogWrite(motorPin4, MOTOR_STOP);
}

// basic ////////////////////////////////////////////////
void forward()
{
  analogWrite(motorPin1, 0);
  analogWrite(motorPin2, MOTOR_HALF_SPEED);
  analogWrite(motorPin3, MOTOR_HALF_SPEED);
  analogWrite(motorPin4, 0);
}
void backward()
{
  analogWrite(motorPin1, MOTOR_HALF_SPEED);
  analogWrite(motorPin2, 0);
  analogWrite(motorPin3, 0);
  analogWrite(motorPin4, MOTOR_HALF_SPEED);
}
void turnLeft()
{
  analogWrite(motorPin1, MOTOR_STOP);
  analogWrite(motorPin2, MOTOR_HALF_SPEED);
  analogWrite(motorPin3, MOTOR_STOP);
  analogWrite(motorPin4, MOTOR_HALF_SPEED);
}
void turnRight()
{
  analogWrite(motorPin1, MOTOR_HALF_SPEED);
  analogWrite(motorPin2, MOTOR_STOP);
  analogWrite(motorPin3, MOTOR_HALF_SPEED);
  analogWrite(motorPin4, MOTOR_STOP);
}

// aggressive ////////////////////////////////////////////////
void forward_AG()
{
  analogWrite(motorPin1, 0);
  analogWrite(motorPin2, MOTOR_FULL_SPEED);
  analogWrite(motorPin3, MOTOR_FULL_SPEED);
  analogWrite(motorPin4, 0);
}
void turnLeft_AG()
{
  analogWrite(motorPin1, MOTOR_STOP);
  analogWrite(motorPin2, MOTOR_FULL_SPEED);
  analogWrite(motorPin3, MOTOR_STOP);
  analogWrite(motorPin4, MOTOR_FULL_SPEED);
}
void turnRight_AG()
{
  analogWrite(motorPin1, MOTOR_FULL_SPEED);
  analogWrite(motorPin2, MOTOR_STOP);
  analogWrite(motorPin3, MOTOR_FULL_SPEED);
  analogWrite(motorPin4, MOTOR_STOP);
}

// roaming or searching ////////////////////////////////////////
void slow_search()
{
  analogWrite(motorPin1, 0);
  analogWrite(motorPin2, MOTOR_ONE_FOURTH_SPEED);
  analogWrite(motorPin3, MOTOR_ONE_FOURTH_SPEED);
  analogWrite(motorPin4, 0);
}


// ultrasonic ultrasonic sensor ////////////////////////////////
#define TRIGGER_PIN 2
#define ECHO_PIN 3

#define TRIGGER_PIN_LEFT 6
#define ECHO_PIN_LEFT 7

#define TRIGGER_PIN_RIGHT 4
#define ECHO_PIN_RIGHT 5

#define TRIGGER_PIN_BACK 12
#define ECHO_PIN_BACK 13

#define MAX_DISTANCE 200

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
NewPing sonar_left(TRIGGER_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonar_right(TRIGGER_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);
NewPing sonar_back(TRIGGER_PIN_BACK, ECHO_PIN_BACK, MAX_DISTANCE);

// line tracing ////////////////////////////////////////////////
#define SensorR A2
#define SensorL A1
#define SensorBR A3
#define SensorBL A4

int value_DR = SensorR;
int value_DL = SensorL;
int value_BR = SensorBR;
int value_BL = SensorBL;

// for strategies ////////////////////////////////////////////////////////////////
int dipPin = A0; 
int dipIn = 0;   

// for delay  ///////////////////////////////////////////////////////////////// ///
const int maxDelay_sides = 1000;
const int maxDelay_Wiper = 400;
const int maxDelay_Wiper_forward = 200;

int elapsed_time = 0;
bool continue_delay = true;


void setup()
{
  pinMode(SensorL, INPUT);
  pinMode(SensorR, INPUT);
  pinMode(SensorBR, INPUT);
  pinMode(SensorBL, INPUT);
  Serial.begin(9600);
}

void loop(){
  
// line
value_DL = analogRead(SensorL);  
value_DR = analogRead(SensorR);  
value_BL = analogRead(SensorBR); 
value_BR = analogRead(SensorBL); 

// ultrasonic
int distance = sonar.ping_cm(); 
int distance_left = sonar_left.ping_cm();
int distance_right = sonar_right.ping_cm();
int distance_back = sonar_back.ping_cm();

// strategies
dipIn = analogRead(dipPin);

// debug 

  // Serial.print(value_DL);
  // Serial.print(" ");
  // Serial.print(value_DR);
  // Serial.print(" ");
  // Serial.print(value_BL);
  // Serial.print(" ");
  // Serial.println(value_BR);

  // Serial.print(distance);qqq
  // Serial.print(" ");
  // Serial.print(distance_left);
  // Serial.print(" ");
  // Serial.println(distance_right);
  // Serial.print(" ");
  // Serial.println(distance_back);


// strategy 1 for slow search ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if (dipIn >= 500 && dipIn <= 599) {
  if (value_DR > 100 or value_BR < 100)
  {
    backward();
    delay(250);
    turnRight();
    delay(305);
  }
  else if (value_DL > 100 or value_BL < 100)
  {
    backward();
    delay(250);
    turnLeft();
    delay(350);
  }

  else if (value_DL < 100 and value_DR < 100 and value_BL > 100 and value_BR > 100){
    if (distance < 20){
      attack();
      continue_delay = false; 
    }
    else if (distance_left < 15){
      turnRight_AG();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_sides && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false; 
      }
    }
  }
    else if (distance_right < 15){
      turnLeft_AG();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_sides && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false; 
      }
    }
  }
    else if (distance_back < 4){
      attack();
      delay(200);
      turnLeft_AG();
      elapsed_time = 0;
      continue_delay = true; 

      while (elapsed_time < maxDelay_sides && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 

        if (distance < 20){
          attack();
          continue_delay = false; 
        }
      }
    }
    else{
      slow_search();
      }
    }
  } 

// Strategy 2 For wiper  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
else if (dipIn >= 800 && dipIn <= 899) {
  if (value_DR > 100 or value_BR < 100)
  {
    backward();
    delay(250);
    turnRight();
    delay(305);
  }
  else if (value_DL > 100 or value_BL < 100)
  {
    backward();
    delay(250);
    turnLeft();
    delay(350);
  }

  else if (value_DL < 100 and value_DR < 100 and value_BL > 100 and value_BR > 100){
    if (distance < 20){
      attack();
      continue_delay = false; 
    }
    else if (distance_left < 15){
      turnRight_AG();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_sides && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false; 
      }
    }
  }
    else if (distance_right < 15){
      turnLeft_AG();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_sides && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false; 
      }
    }
  }
    else if (distance_back < 4){
      attack();
      delay(200);
      turnLeft_AG();
      elapsed_time = 0;
      continue_delay = true; 

      while (elapsed_time < maxDelay_sides && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 

        if (distance < 20){
          attack();
          continue_delay = false; 
      }
    }
  }
    else{
      turnLeft_AG();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_Wiper && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false; 
    }
  }
      turnRight_AG();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_Wiper && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false; 
    }
  }
      forward();
      elapsed_time = 0;
      continue_delay = true; 
      
      while (elapsed_time < maxDelay_Wiper_forward && continue_delay){
        delay(100);
        elapsed_time += 100;
        distance = sonar.ping_cm(); 
        if (distance < 20){
          attack();
          continue_delay = false;
        }
      }
    }
  }
}


// strategy 3 For ????? //////////////////////////////////////////////////
else if (dipIn >= 60 && dipIn <= 200) {
   Serial.println("function 3");

}

// strategy 4 For ????? //////////////////////////////////////////////////
else if (dipIn >= 980 && dipIn <= 2000){
   Serial.println("function 4");
} 


// idle
else {
   Serial.println("no function");
 }

}
